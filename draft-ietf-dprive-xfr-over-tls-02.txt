



dprive                                                          H. Zhang
Internet-Draft                                                   P. Aras
Updates: 1995 (if approved)                                   Salesforce
Intended status: Standards Track                               W. Toorop
Expires: January 2, 2021                                      NLnet Labs
                                                            S. Dickinson
                                                              Sinodun IT
                                                               A. Mankin
                                                              Salesforce
                                                            July 1, 2020


                       DNS Zone Transfer-over-TLS
                   draft-ietf-dprive-xfr-over-tls-02

Abstract

   DNS zone transfers are transmitted in clear text, which gives
   attackers the opportunity to collect the content of a zone by
   eavesdropping on network connections.  The DNS Transaction Signature
   (TSIG) mechanism is specified to restrict direct zone transfer to
   authorized clients only, but it does not add confidentiality.  This
   document specifies use of DNS-over-TLS to prevent zone contents
   collection via passive monitoring of zone transfers.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 2, 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Zhang, et al.            Expires January 2, 2021                [Page 1]

Internet-Draft                XFR-over-TLS                     July 2020


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Use Cases for XFR-over-TLS  . . . . . . . . . . . . . . . . .   4
   4.  Connection and Data Flows in Existing XFR Mechanisms  . . . .   5
     4.1.  AXFR Mechanism  . . . . . . . . . . . . . . . . . . . . .   6
     4.2.  IXFR Mechanism  . . . . . . . . . . . . . . . . . . . . .   6
     4.3.  Data Leakage of NOTIFY and SOA Message Exchanges  . . . .   8
       4.3.1.  NOTIFY  . . . . . . . . . . . . . . . . . . . . . . .   8
       4.3.2.  SOA . . . . . . . . . . . . . . . . . . . . . . . . .   8
   5.  Connection and Data Flows in XoT  . . . . . . . . . . . . . .   8
     5.1.  Performance Considerations  . . . . . . . . . . . . . . .   8
     5.2.  TLS versions  . . . . . . . . . . . . . . . . . . . . . .   8
     5.3.  AXoT mechanism  . . . . . . . . . . . . . . . . . . . . .   9
       5.3.1.  Coverage and relationship to RFC5936  . . . . . . . .   9
       5.3.2.  AXoT connection and message handling  . . . . . . . .   9
       5.3.3.  Padding AXFR responses  . . . . . . . . . . . . . . .  11
     5.4.  IXoT mechanism  . . . . . . . . . . . . . . . . . . . . .  13
       5.4.1.  Coverage and relationship to RFC1995  . . . . . . . .  14
       5.4.2.  IXoT connection and message handling  . . . . . . . .  14
       5.4.3.  Condensation of responses . . . . . . . . . . . . . .  15
       5.4.4.  Padding of IXFR responses . . . . . . . . . . . . . .  15
       5.4.5.  Fallback to AXFR  . . . . . . . . . . . . . . . . . .  16
   6.  Multi-primary Configurations  . . . . . . . . . . . . . . . .  16
   7.  Zone Transfer with DoT - Authentication . . . . . . . . . . .  17
     7.1.  TSIG  . . . . . . . . . . . . . . . . . . . . . . . . . .  17
     7.2.  SIG(0)  . . . . . . . . . . . . . . . . . . . . . . . . .  17
     7.3.  TLS . . . . . . . . . . . . . . . . . . . . . . . . . . .  17
       7.3.1.  Opportunistic . . . . . . . . . . . . . . . . . . . .  17
       7.3.2.  Strict  . . . . . . . . . . . . . . . . . . . . . . .  18
       7.3.3.  Mutual  . . . . . . . . . . . . . . . . . . . . . . .  18
     7.4.  IP Based ACL on the Primary . . . . . . . . . . . . . . .  18
     7.5.  ZONEMD  . . . . . . . . . . . . . . . . . . . . . . . . .  18
     7.6.  Comparison of Authentication Methods  . . . . . . . . . .  19
   8.  Policies for Both AXFR and IXFR . . . . . . . . . . . . . . .  20
   9.  Implementation Considerations . . . . . . . . . . . . . . . .  21
   10. Implementation Status . . . . . . . . . . . . . . . . . . . .  21



Zhang, et al.            Expires January 2, 2021                [Page 2]

Internet-Draft                XFR-over-TLS                     July 2020


   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  21
   12. Security Considerations . . . . . . . . . . . . . . . . . . .  21
   13. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  21
   14. Changelog . . . . . . . . . . . . . . . . . . . . . . . . . .  22
   15. References  . . . . . . . . . . . . . . . . . . . . . . . . .  22
     15.1.  Normative References . . . . . . . . . . . . . . . . . .  23
     15.2.  Informative References . . . . . . . . . . . . . . . . .  24
     15.3.  URIs . . . . . . . . . . . . . . . . . . . . . . . . . .  25
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25

1.  Introduction

   DNS has a number of privacy vulnerabilities, as discussed in detail
   in [I-D.ietf-dprive-rfc7626-bis].  Stub client to recursive resolver
   query privacy has received the most attention to date.  There are now
   standards track documents for three encryption capabilities for stub
   to recursive queries and more work going on to guide deployment of
   specifically DNS-over-TLS (DoT) [RFC7858] and DNS-over-HTTPS (DoH)
   [RFC8484].

   [I-D.ietf-dprive-rfc7626-bis] established that stub client DNS query
   transactions are not public and needed protection, but on zone
   transfer [RFC1995] [RFC5936] it says only:

   "Privacy risks for the holder of a zone (the risk that someone gets
   the data) are discussed in [RFC5936] and [RFC5155]."

   In what way is exposing the full contents of a zone a privacy risk?
   The contents of the zone could include information such as names of
   persons used in names of hosts.  Best practice is not to use personal
   information for domain names, but many such domain names exist.
   There may also be regulatory, policy or other reasons why the zone
   contents in full must be treated as private.

   Neither of the RFCs mentioned in [I-D.ietf-dprive-rfc7626-bis]
   contemplates the risk that someone gets the data through
   eavesdropping on network connections, only via enumeration or
   unauthorized transfer as described in the following paragraphs.

   [RFC5155] specifies NSEC3 to prevent zone enumeration, which is when
   queries for the authenticated denial of existences records of DNSSEC
   allow a client to walk through the entire zone.  Note that the need
   for this protection also motivates NSEC5 [I-D.vcelak-nsec5]; zone
   walking is now possible with NSEC3 due to crypto-breaking advances,
   and NSEC5 is a response to this problem.

   [RFC5155] does not address data obtained outside zone enumeration
   (nor does [I-D.vcelak-nsec5]).  Preventing eavesdropping of zone



Zhang, et al.            Expires January 2, 2021                [Page 3]

Internet-Draft                XFR-over-TLS                     July 2020


   transfers (this draft) is orthogonal to preventing zone enumeration,
   though they aim to protect the same information.

   [RFC5936] specifies using TSIG [RFC2845] for authorization of the
   clients of a zone transfer and for data integrity, but does not
   express any need for confidentiality, and TSIG does not offer
   encryption.  Some operators use SSH tunneling or IPSec to encrypt the
   transfer data.

   Because the AXFR zone transfer is typically carried out over TCP from
   authoritative DNS protocol implementations, encrypting AXFR using DoT
   [RFC7858] seems like a simple step forward.  This document specifies
   how to use DoT to prevent zone collection from zone transfers,
   including discussion of approaches for IXFR, which uses UDP or TCP.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] and [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Privacy terminology is as described in Section 3 of [RFC6973].

   Note that in this document we choose to use the terms 'primary' and
   'secondary' for two servers engaged in zone transfers.

   DNS terminology is as described in [RFC8499].

   DoT: DNS-over-TLS as specified in [RFC7858]

   XoT: Generic XFR-over-TLS mechanisms as specified in this document

   AXoT: AXFR-over-TLS

   IXoT: IXFR over-TLS

3.  Use Cases for XFR-over-TLS

   o  Confidentiality.  Clearly using an encrypted transport for zone
      transfers will defeat zone content leakage that can occur via
      passive surveillance.

   o  Authentication.  Use of single or mutual TLS authentication (in
      combination with ACLs) can complement and potentially be an
      alternative to TSIG.




Zhang, et al.            Expires January 2, 2021                [Page 4]

Internet-Draft                XFR-over-TLS                     July 2020


   o  Performance.  Existing AXFR and IXFR mechanisms have the burden of
      backwards compatibility with older implementations based on the
      original specifications in [RFC1034] and [RFC1035].  For example,
      some older AXFR servers don't support using a TCP connection for
      multiple AXFR sessions or XFRs of different zones because they
      have not been updated to follow the guidance in [RFC5936].  Any
      implementation of XFR-over-TLS (XoT) would obviously be required
      to implement optimized and interoperable transfers as described in
      [RFC5936], e.g., transfer of multiple zones over one connection.

   o  Performance.  Current usage of TCP for IXFR is sub-optimal in some
      cases i.e.  connections are frequently closed after a single IXFR.

4.  Connection and Data Flows in Existing XFR Mechanisms

   The original specification for zone transfers in [RFC1034] and
   [RFC1035] was based on a polling mechanism: a secondary performed a
   periodic SOA query (based on the refresh timer) to determine if an
   AXFR was required.

   [RFC1995] and [RFC1996] introduced the concepts of IXFR and NOTIFY
   respectively, to provide for prompt propagation of zone updates.
   This has largely replaced AXFR where possible, particularly for
   dynamically updated zones.

   [RFC5936] subsequently redefined the specification of AXFR to improve
   performance and interoperability.

   In this document we use the phrase "XFR mechanism" to describe the
   entire set of message exchanges between a secondary and a primary
   that concludes in a successful AXFR or IXFR request/response.  This
   set may or may not include

   o  NOTIFY messages

   o  SOA queries

   o  Fallback from IXFR to AXFR

   o  Fallback from IXFR-over-UDP to IXFR-over-TCP

   The term is used to encompasses the range of permutations that are
   possible and is useful to distinguish the 'XFR mechanism' from a
   single XFR request/response exchange.







Zhang, et al.            Expires January 2, 2021                [Page 5]

Internet-Draft                XFR-over-TLS                     July 2020


4.1.  AXFR Mechanism

   The figure below provides an outline of an AXFR mechanism including
   NOTIFYs.

   Figure 1.  AXFR Mechanism [1]

   1.  An AXFR is often (but not always) preceded by a NOTIFY (over UDP)
       from the primary to the secondary.  A secondary may also initiate
       an AXFR based on a refresh timer or scheduled/triggered zone
       maintenance.

   2.  The secondary will normally (but not always) make a SOA query to
       the primary to obtain the serial number of the zone held by the
       primary.

   3.  If the primary serial is higher than the secondaries serial
       (using Serial Number Arithmetic [RFC1982]), the secondary makes
       an AXFR request (over TCP) to the primary after which the AXFR
       data flows in one or more AXFR responses on the TCP connection.

   [RFC5936] specifies that AXFR must use TCP as the transport protocol
   but details that there is no restriction in the protocol that a
   single TCP connection must be used only for a single AXFR exchange,
   or even solely for XFRs.  For example, it outlines that the SOA query
   can also happen on this connection.  However, this can cause
   interoperability problems with older implementations that support
   only the trivial case of one AXFR per connection.

   Further details of the limitations in existing AXFR implementations
   are outlined in [RFC5936].

   It is noted that unless the NOTIFY is sent over a trusted
   communication channel and/or signed by TSIG is can be spoofed causing
   unnecessary zone transfer attempts.

   Similarly unless the SOA query is sent over a trusted communication
   channel and/or signed by TSIG the response can, in principle, be
   spoofed causing a secondary to incorrectly believe its version of the
   zone is update to date.  Repeated successful attacks on the SOA could
   result in a secondary serving stale zone data.

4.2.  IXFR Mechanism

   The figure below provides an outline of the IXFR mechanism including
   NOTIFYs.

   Figure 1.  IXFR Mechanism [2]



Zhang, et al.            Expires January 2, 2021                [Page 6]

Internet-Draft                XFR-over-TLS                     July 2020


   1.  An IXFR is normally (but not always) preceded by a NOTIFY (over
       UDP) from the primary to the secondary.  A secondary may also
       initiate an IXFR based on a refresh timer or scheduled/triggered
       zone maintenance.

   2.  The secondary will normally (but not always) make a SOA query to
       the primary to obtain the serial number of the zone held by the
       primary.

   3.  If the primary serial is higher than the secondaries serial
       (using Serial Number Arithmetic [RFC1982]), the secondary makes
       an IXFR request to the primary after the primary sends an IXFR
       response.

   [RFC1995] specifies that Incremental Transfer may use UDP if the
   entire IXFR response can be contained in a single DNS packet,
   otherwise, TCP is used.  In fact is says in non-normative language:

   "Thus, a client should first make an IXFR query using UDP."

   So there may be a forth step above where the client falls back to
   IXFR-over-TCP.  There may also be a forth step where the secondary
   must fall back to AXFR because, e.g., the primary does not support
   IXFR.

   However it is noted that at least two widely used open source
   authoritative nameserver implementations (BIND [3] and NSD [4]) do
   IXFR using TCP by default in their latest releases.  For BIND TCP
   connections are sometimes used for SOA queries but in general they
   are not used persistently and close after an IXFR is completed.

   QUESTION FOR US: Look at packet captures from NSD and Knot Auth to
   see what they do.

   It is noted that the specification for IXFR was published well before
   TCP was considered a first class transport for DNS.  This document
   therefore updates [RFC1995] to state that DNS implementations that
   support IXFR-over-TCP MUST use [RFC7766] to optimize the use of TCP
   connections and SHOULD use [RFC7858] to manage persistent
   connections.

   QUESTION FOR US: We don't go as far here as updating IXFR-over-TCP to
   match the behavior outlined in section 5.4.2 for IXoT.  Should we?








Zhang, et al.            Expires January 2, 2021                [Page 7]

Internet-Draft                XFR-over-TLS                     July 2020


4.3.  Data Leakage of NOTIFY and SOA Message Exchanges

   This section attempts to presents a rationale for also encrypting the
   other messages in the XFR mechanism.

   Since the SOA of the published zone can be trivially discovered by
   simply querying the publicly available authoritative servers leakage
   of this RR is not discussed in the following sections.

4.3.1.  NOTIFY

   Unencrypted NOTIFY messages identify configured secondaries on the
   primary.

   [RFC1996] also states:

   "If ANCOUNT>0, then the answer section represents an unsecure hint at
   the new RRset for this (QNAME,QCLASS,QTYPE).

   But since the only supported QTYPE for NOTIFY is SOA, this does not
   pose a potential leak.

4.3.2.  SOA

   For hidden primaries or secondaries the SOA response leaks the degree
   of lag of any downstream secondary.

5.  Connection and Data Flows in XoT

5.1.  Performance Considerations

   The details in [RFC7766], [RFC7858] and [RFC8310] about, e.g., using
   persistent connections and TLS Session Resumption [RFC5077] are fully
   applicable to XoT as well.

   It is RECOMMENDED that clients and servers that support XoT also
   implement EDNS0 Keepalive [RFC7828].

   It is useful to note that in these mechanisms it is the secondary
   that initiates the TLS connection to the primary for a XFR request,
   so that in terms of connectivity the secondary is the TLS client and
   the primary the TLS server.

5.2.  TLS versions

   For improved security all implementations of this specification MUST
   use only TLS 1.3 [RFC8446] or later.




Zhang, et al.            Expires January 2, 2021                [Page 8]

Internet-Draft                XFR-over-TLS                     July 2020


5.3.  AXoT mechanism

   The figure below provides an outline of the AXoT mechanism including
   NOTIFYs.

   Figure 3: AXoT mechanism [5]

   The connection for AXFR-over-TLS (AXoT) SHOULD be established using
   port 853, as specified in [RFC7858], unless there is mutual agreement
   between the secondary and primary to use a port other than port 853
   for AXoT.

5.3.1.  Coverage and relationship to RFC5936

   [RFC5936] re-specified AXFR providing additional guidance beyond that
   provided in [RFC1034] and [RFC1035].  For example, sections 4.1,
   4.1.1 and 4.1.2 of [RFC5936] provide improved guidance for AXFR
   clients and servers with regard to re-use of connections for multiple
   AXFRs, AXFRs of different zones and using TCP connection for other
   queries including SOA.  However [RFC5936] was constrained by having
   to be backwards compatible with some very early basic implementations
   of AXFR.

   Here we specify some optimized behaviors for AXoT, based closely on
   those in [RFC5936], but without the constraint of backwards
   compatibility since it is expected that all implementations of AXoT
   fully implement the behavior described here.

   Where any behavior is not explicitly described here, the behavior
   specified in [RFC5936] MUST be followed.  Any behavior specified here
   takes precedence for AXoT implementations over that in [RFC5936].

5.3.2.  AXoT connection and message handling

   The first paragraph of Section 4.1.1 of [RFC5936] says that clients
   SHOULD close the connection when there is no 'apparent need' to use
   the connection for some time period.

   For AXoT this requirement is updated: AXoT clients and servers SHOULD
   use EDNS0 Keepalive [RFC7828] to establish the connection timeouts to
   be used.  The server SHOULD send the EDNS0 Keepalive option on every
   AXoT request sent so that the server has every opportunity to update
   the Keepalive timeout.  The AXoT server may use the frequency of
   recent AXFRs to calculate an average update rate as input to the
   decision of what EDNS0 Keepalive timeout to use.  If the server does
   not support EDNS0 Keepalive the client MAY keep the connection open
   for a few seconds ([RFC7766] recommends that servers use timeouts of
   at least a few seconds).



Zhang, et al.            Expires January 2, 2021                [Page 9]

Internet-Draft                XFR-over-TLS                     July 2020


   Whilst the specification for EDNS0 [RFC6891]  does not specifically
   mention AXFRs, it does say

   "If an OPT record is present in a received request, compliant
   responders MUST include an OPT record in their respective responses."

   We clarify here that if an OPT record is present in a received AXoT
   request, compliant responders MUST include an OPT record in each of
   the subsequent AXoT responses.  Note that this requirement, combined
   with the use of EDNS0 Keepalive, enables AXoT servers to signal the
   desire to close a connection due to low resources by sending an EDNS0
   Keepalive option with a timeout of 0 on any AXoT response (in the
   absence of another way to signal the abort of a AXoT transfer).

   An AXoT server MUST be able to handle multiple AXFR requests on a
   single TLS connection (for the same and different zones), as well as
   to handle other query/response transactions over it.

   [RFC5936] says:

   "An AXFR client MAY use an already opened TCP connection to start an
   AXFR session.  Using an existing open connection is RECOMMENDED over
   opening a new connection.  (Non-AXFR session traffic can also use an
   open connection.)"

   For AXoT this requirement is restated: AXoT clients SHOULD re-use an
   existing open TLS connection when starting any new AXoT session to
   the same primary, and for issuing SOA queries, instead of opening a
   new connection.  (Non-AXoT session traffic can also use an open TLS
   connection.)  The number of TLS connections between a secondary and
   primary SHOULD be minimized.

   Valid reasons for not re-using existing connections might include:

   o  reaching a configured limit for the number of outstanding queries
      allowed on a single TLS connection

   o  the message ID pool has already been exhausted on an open
      connection

   o  a large number of timeouts or slow responses have occurred on an
      open connection

   o  an EDNS0 Keepalive option with a timeout of 0 has been received
      from the server and the client is in the process of closing the
      connection





Zhang, et al.            Expires January 2, 2021               [Page 10]

Internet-Draft                XFR-over-TLS                     July 2020


   If no TLS connections are currently open, AXoT clients MAY send SOA
   queries over UDP, TCP or TLS.

   [RFC5936] says:

   "Some old AXFR clients expect each response message to contain only a
   single RR.  To interoperate with such clients, the server MAY
   restrict response messages to a single RR."

   This is opposed to the normal behavior of containing a sufficient
   number of RRs to reasonably amortize the per-message overhead.  We
   clarify here that AXoT clients MUST be able to handle responses that
   include multiple RRs, up to the largest number that will fit within a
   DNS message (taking the required content of the other sections into
   account, as described here and in [RFC5936]).  This removes any
   burden on AXoT servers of having to accommodate a configuration
   option or support for restricting responses to containing only a
   single RR.

   An AXoT client SHOULD pipeline AXFR requests for different zones on a
   single TLS connection.  An AXoT server SHOULD respond to those
   requests as soon as the response is available i.e. potentially out of
   order.

5.3.3.  Padding AXFR responses

   QUESTION FOR US:

   o  Not sure if we should dump all this section in a placeholder draft
      on padding or we could get a basic version ironed out to include
      here?  We might need to include the capability for clients to
      accept 'empty' responses here for interoperability later on?

   o  How do most open source implementations split up AXFR responses?
      A fixed number of records per response or as many as they can fit
      in a TCP message length of 65535 bytes?  (Note RFC5936 talks about
      supporting old clients that expect one record per response!).

   o  Do they send records in a fixed or random order - would this allow
      anything about the zone contents to be inferred by watching
      different message sizes over time if they are not all padded to
      the same size

   The goal of padding AXFR responses would be two fold:

   o  to obfuscate the actual size of the transferred zone to minimised
      information leakage about the entire contents of the zone.




Zhang, et al.            Expires January 2, 2021               [Page 11]

Internet-Draft                XFR-over-TLS                     July 2020


   o  to obfuscate the incremental changes to the zone between SOA
      updates to minimize information leakage about zone update activity
      and growth.

   Note that the re-use of TLS connections for transfers of multiple
   different zones would complicate any attempt to analyze the traffic
   size and timing to extract information.

   Note that deducing information about the the above from zone transfer
   sizes is dependent on whether and how the zone is DNSSEC signed, but
   this information can normally be obtained by directly querying the
   authoritative server.  In the absence of DNSSEC deducing zone sizes
   from AXFRs is straight forward.

   A simplistic option, following the premise of the Block-Length
   Padding strategy recommended in [RFC8467], would be to specify

   o  a 'message size' to which each individual AXFR response would
      always be padded (with a maximum value of 65353 bytes) and

   o  a compatible 'zone block size' for a zone to which the sum total
      of all the AXFR responses should be padded.  This could
      equivalently be specified as a 'zone number of AXFR responses
      block size'.

   Primary implementations SHOULD provide a configurable block-size
   based padding mechanism.

   This second requirement is likely to require an implementation to
   create 'empty' AXFR responses in order to pad a zone to the zone
   block size.  That is, AXFR responses that contain no RR's apart from
   the EDNS(0) option for padding.  However, as will existing AXFR, the
   last message sent MUST contain the same SOA that was in the first
   message of the AXFR response series in order to signal the conclusion
   of the zone transfer.

   [RFC5936] says:

   "Each AXFR response message SHOULD contain a sufficient number of RRs
   to reasonably amortize the per-message overhead, up to the largest
   number that will fit within a DNS message (taking the required
   content of the other sections into account, as described below)."

   'Empty' AXoT responses generated in order to meet a padding
   requirement are exempt from the above statement.  Secondary
   implementations MUST be resilient to receiving padded AXFR responses
   including 'empty' AXFR response that contain only padding.




Zhang, et al.            Expires January 2, 2021               [Page 12]

Internet-Draft                XFR-over-TLS                     July 2020


   QUESTION FOR US: What do existing clients do if they receive 'empty'
   responses today?

   Observation of the zone transfers would then reveal only zone block
   size step changes in the total zone size (if the zone size changed
   sufficiently) obfuscating the smaller fluctuations.

   Choosing a message size of less than 65535 only really makes sense
   for small zones that can be transferred in a single response (in
   which case the zone block size can be set to the same value).
   Choosing a zone block size close to the current zone size would
   provide some protection with a minimal overhead.  Choosing a zone
   block size much larger than the current zone size would provide
   increased protection but with increased overhead.

   As with any padding strategy the trade-off between increased
   bandwidth and processing due to the larger size and number of padded
   DNS messages and the corresponding gain in confidentiality must be
   carefully considered.

   As noted in [RFC8467], the maximum message length, as dictated by the
   protocol, limits the space for EDNS(0) options.  Since padding will
   reduce the message space available to other EDNS(0) options, the
   "Padding" option MUST be the last EDNS(0) option applied before a DNS
   message is sent.  In particular for AXFR, that means that if the
   message is to be signed with, e.g., TSIG this must be done before the
   padding is applied.

   Recommendation of specific values for the block sizes described above
   are out of scope for this specification.  More detailed
   considerations of the trade-off described above with regard to block
   sizes, size recommendations and also alternative proposals for AXFR
   padding are expected to be the subject of future work.

5.4.  IXoT mechanism

   The figure below provides an outline of the IXoT mechanism including
   NOTIFYs.

   Figure 4: IXoT mechanism [6]

   The connection for IXFR-over-TLS (IXoT) SHOULD be established using
   port 853, as specified in [RFC7858], unless there is mutual agreement
   between the secondary and primary to use a port other than port 853
   for IXoT.






Zhang, et al.            Expires January 2, 2021               [Page 13]

Internet-Draft                XFR-over-TLS                     July 2020


5.4.1.  Coverage and relationship to RFC1995

   [RFC1995] says nothing with respect to optimizing IXFRs over TCP or
   re-using already open TCP connections to perform IXFRs or other
   queries.  We provide new guidance here specific to IXoT that aligns
   with the guidance in [RFC5936] for AXFR, that in section Section 5.3
   for AXoT, and with that for performant TCP/TLS usage in [RFC7766] and
   [RFC7858].

   Where any behavior is not explicitly described here, the behavior
   specified in [RFC1995] MUST be followed.  Any behavior specified here
   takes precedence for IXoT implementations over that in [RFC1995].

5.4.2.  IXoT connection and message handling

   In a manner entirely analogous to that described in paragraph 2 of
   Section 5.3.2 IXoT clients and servers SHOULD use EDNS0 Keepalive
   [RFC7828] to establish the connection timeouts to be used.

   In the original definition of IXFR, there arguably is an implicit
   assumption (probably unintentional) that a TCP connection is used for
   one and only one IXFR request.  Indeed, several open source
   implementations currently take this approach.  An IXoT server MUST be
   able to handle multiple IXFR requests on a single TLS connection (for
   the same and different zones), as well as to handle other query/
   response transactions over it.

   IXoT clients SHOULD re-use an existing open TLS connection when
   making any new IXoT request to the same primary, and for issuing SOA
   queries, instead of opening a new connection.  (Non-IXoT traffic can
   also use an open TLS connection.)  The number of TLS connections
   between a secondary and primary SHOULD be minimized.

   Valid reasons for not re-using existing connections are the same as
   those described in Section 5.3.2

   If no TLS connections are currently open, IXoT clients MAY send SOA
   queries over UDP, TCP or TLS.

   An IXoT client SHOULD pipeline IXFR requests for different zones on a
   single TLS connection.  An IXoT server SHOULD respond to those
   requests as soon as the response is available i.e. potentially out of
   order.








Zhang, et al.            Expires January 2, 2021               [Page 14]

Internet-Draft                XFR-over-TLS                     July 2020


5.4.3.  Condensation of responses

   QUESTION: Since this is a new specification should there be a
   requirement that IXoT servers are RECOMMENDED to condense responses
   as described in Section 6 of [RFC1995].  [RFC1995] document says this
   is optional and MAY be done.  Whilst it does add complexity to
   generating response it can significantly reduce the size of responses
   and will have implications for padding.

5.4.4.  Padding of IXFR responses

   QUESTION FOR US: As with AXFR not sure if we should dump all this
   section in a placeholder draft on padding or we could get a basic
   version ironed out to include here?

   The goal of padding AXFR responses would be to obfuscate the
   incremental changes to the zone between SOA updates to minimize
   information leakage about zone update activity and growth.  Both the
   size and timing of the IXFRs could reveal information.

   Note that the re-use of TLS connections for transfers of multiple
   different zones would complicate any attempt to analyze the traffic
   size and timing to extract information.

   IXFR responses can vary in size greatly from the order of 100 bytes
   for one or two record updates, to tens of thousands of bytes for
   large dynamic DNSSEC signed zones and (in principle) up to the
   maximum size of a singe IXFR response (65535 bytes).  The frequency
   of IXFR responses can also depend greatly on if and how the zone is
   DNSSEC signed.  For example, both the following zones might see
   frequent similarly sized IXFR exchanges

   o  a small DNSSEC signed zone with frequent record updates

   o  a large DNSSEC signed zone that receives no updates but the RRSIG
      signature expiry dates are jittered across the signature lifetime
      window

   A simplistic option, following the premise of the Block-Length
   Padding strategy recommended in [RFC8467], would be to specify

   o  a 'message block size' where each individual IXFR response would
      always be padded to the closest multiple of that number of bytes
      (with a maximum value of 65353 bytes)

   Choosing a message block size of less than 65535 will expose some
   information about zone activity but obfuscate the more granular
   changes.



Zhang, et al.            Expires January 2, 2021               [Page 15]

Internet-Draft                XFR-over-TLS                     July 2020


   As with any padding strategy the trade-off between increased
   bandwidth and processing due to the larger size and number of padded
   DNS messages and the corresponding gain in confidentiality must be
   carefully considered.  For IXFR a detailed understanding of the zone
   contents and transfer pattern is likely to be required in order to
   select the optimal block size for a zone.

   Primary implementations SHOULD provide a configurable message block
   size based padding mechanism.  Secondary implementations MUST be
   resilient to receiving padded IXFR responses.

   As noted in [RFC8467], the maximum message length, as dictated by the
   protocol, limits the space for EDNS(0) options.  Since padding will
   reduce the message space available to other EDNS(0) options, the
   "Padding" option MUST be the last EDNS(0) option applied before a DNS
   message is sent.  In particular for AXFR, that means that if the
   message is to be signed with, e.g., TSIG this must be done before the
   padding is applied.

   Recommendation of specific values for message block sizes are out of
   scope for this specification.  More detailed considerations of the
   trade-off described above with regard to message block sizes,
   specific size recommendations and also alternative proposals for IXFR
   padding are expected to be the subject of future work.

5.4.5.  Fallback to AXFR

   Fallback to AXFR can happen, for example, if the server is not able
   to provide an IXFR for the requested SOA.  Implementations differ in
   how long they store zone deltas and how many may be stored at any one
   time.

   After a failed IXFR a IXoT client SHOULD request the AXFR on the
   already open TLS connection.

6.  Multi-primary Configurations

   Also known as multi-master configurations this model can provide
   flexibility and redundancy particularly for IXFR.  A secondary will
   receive one or more NOTIFY messages and can send an SOA to all of the
   configured primaries.  It can then choose to send an XFR request to
   the primary with the highest SOA (or other criteria, e.g., RTT).

   When using persistent connections the secondary may have a TLS
   connection already open to one or more primaries.  Should a secondary
   preferentially request an XFR from a primary to which it already has
   an open TLS connection or the one with the highest SOA (assuming it
   doesn't have a connection open to it already)?



Zhang, et al.            Expires January 2, 2021               [Page 16]

Internet-Draft                XFR-over-TLS                     July 2020


   Two extremes can be envisaged here.  The first one can be considered
   a 'preferred primary connection' model.  In this case the secondary
   continues to use one persistent connection to a single primary until
   it has reason not to.  Reasons not to might include the primary
   repeatedly closing the connection, long RTTs on transfers or the SOA
   of the primary being an unacceptable lag behind the SOA of an
   alternative primary.

   The other extreme can be considered a 'parallel primary connection'
   model.  Here a secondary could keep multiple persistent connections
   open to all available primaries and only request XFRs from the
   primary with the highest serial number.  Since normally the number of
   secondaries and primaries in direct contact in a transfer group is
   reasonably low this might be feasible if latency is the most
   significant concern.

   Recommendation of a particular scheme is out of scope of this
   document but implementations are encouraged to provide configuration
   options that allow operators to make choices about this behavior.

7.  Zone Transfer with DoT - Authentication

7.1.  TSIG

   TSIG [RFC2845] provides a mechanism for two or more parties to use
   shared secret keys which can then be used to create a message digest
   to protect individual DNS messages.  This allows each party to
   authenticate that a request or response (and the data in it) came
   from the other party, even if it was transmitted over an unsecured
   channel or via a proxy.  It provides party-to-party data
   authentication, but not hop-to-hop channel authentication or
   confidentiality.

7.2.  SIG(0)

   SIG(0) [RFC2535] similarly also provides a mechanism to digitally
   sign a DNS message but uses public key authentication, where the
   public keys are stored in DNS as KEY RRs and a private key is stored
   at the signer.  It also provides party-to-party data authentication,
   but not hop-to-hop channel authentication or confidentiality.

7.3.  TLS

7.3.1.  Opportunistic

   Opportunistic TLS [RFC8310] provides a defense against passive
   surveillance, providing on-the-wire confidentiality.




Zhang, et al.            Expires January 2, 2021               [Page 17]

Internet-Draft                XFR-over-TLS                     July 2020


7.3.2.  Strict

   Strict TLS [RFC8310] requires that a client is configured with an
   authentication domain name (and/or SPKI pinset) that should be used
   to authenticate the TLS handshake with the server.  This additionally
   provides a defense for the client against active surveillance,
   providing client-to-server authentication and end-to-end channel
   confidentiality.

7.3.3.  Mutual

   This is an extension to Strict TLS [RFC8310] which requires that a
   client is configured with an authentication domain name (and/or SPKI
   pinset) and a client certificate.  The client offers the certificate
   for authentication by the server and the client can authentic the
   server the same way as in Strict TLS.  This provides a defense for
   both parties against active surveillance, providing bi-directional
   authentication and end-to-end channel confidentiality.

7.4.  IP Based ACL on the Primary

   Most DNS server implementations offer an option to configure an IP
   based Access Control List (ACL), which is often used in combination
   with TSIG based ACLs to restrict access to zone transfers on primary
   servers.

   This is also possible with XoT but it must be noted that as with TCP
   the implementation of such an ACL cannot be enforced on the primary
   until a XFR request is received on an established connection.

   If control were to be any more fine-grained than this then a
   separate, dedicated port would need to be agreed between primary and
   secondary for XoT such that implementations would be able to refuse
   connections on that port to all clients except those configured as
   secondaries.

7.5.  ZONEMD

   Message Digest for DNS Zones (ZONEMD)
   [I-D.ietf-dnsop-dns-zone-digest] digest is a mechanism that can be
   used to verify the content of a standalone zone.  It is designed to
   be independent of the transmission channel or mechanism, allowing a
   general consumer of a zone to do origin authentication of the entire
   zone contents.  Note that the current version of
   [I-D.ietf-dnsop-dns-zone-digest] states:

   "As specified at this time, ZONEMD is not designed for use in large,
   dynamic zones due to the time and resources required for digest



Zhang, et al.            Expires January 2, 2021               [Page 18]

Internet-Draft                XFR-over-TLS                     July 2020


   calculation.  The ZONEMD record described in this document includes
   fields reserved for future work to support large, dynamic zones."

   It is complementary the above mechanisms and can be used in
   conjunction with XoT but is not considered further.

7.6.  Comparison of Authentication Methods

   The Table below compares the properties of a selection of the above
   methods in terms of what protection they provide to the secondary and
   primary servers during XoT in terms of:

   o  'Data Auth': Authentication that the DNS message data is signed by
      the party with whom credentials were shared (the signing party may
      or may not be party operating the far end of a TCP/TLS connection
      in a 'proxy' scenario).  For the primary the TSIG on the XFR
      request confirms that the requesting party is authorized to
      request zone data, for the secondary it authenticates the zone
      data that is received.

   o  'Channel Conf': Confidentiality of the communication channel
      between the client and server (i.e. the two end points of a TCP/
      TLS connection).

   o  Channel Auth: Authentication of the identity of party to whom a
      TCP/TLS connection is made (this might not be a direct connection
      between the primary and secondary in a proxy scenario).

   It is noted that zone transfer scenarios can vary from a simple
   single primary/secondary relationship where both servers are under
   the control of a single operator to a complex hierarchical structure
   which includes proxies and multiple operators.  Each deployment
   scenario will require specific analysis to determine which
   authentication methods are best suited to the deployment model in
   question.

   Table 1: Properties of Authentication methods for XoT [7]

   Based on this analysis it can be seen that:

   o  A combination of Opportunistic TLS and TSIG provides both data
      authentication and channel confidentiality for both parties.
      However this does not stop a MitM attack on the channel which
      could be used to gather zone data.

   o  Using just mutual TLS can be considered a standalone solution if
      the secondary has reason to place equivalent trust in channel




Zhang, et al.            Expires January 2, 2021               [Page 19]

Internet-Draft                XFR-over-TLS                     July 2020


      authentication as data authentication, e.g., the same operator
      runs both the primary and secondary.

   o  Using TSIG, Strict TLS and an ACL on the primary provides all 3
      properties for both parties with probably the lowest operational
      overhead.

8.  Policies for Both AXFR and IXFR

   We call the entire group of servers involved in XFR (all the
   primaries and all the secondaries) the 'transfer group'.

   Within any transfer group both AXFRs and IXFRs for a zone SHOULD all
   use the same policy, e.g., if AXFRs use AXoT all IXFRs SHOULD use
   IXoT.

   In order to assure the confidentiality of the zone information, the
   entire transfer group MUST have a consistent policy of requiring
   confidentiality.  If any do not, this is a weak link for attackers to
   exploit.

   A XoT policy should specify

   o  If TSIG or SIG(0) is required

   o  What kind of TLS is required (Opportunistic, Strict or mTLS)

   o  If IP based ACLs should also be used.

   Since this may require configuration of a number of servers who may
   be under the control of different operators the desired consistency
   could be hard to enforce and audit in practice.

   Certain aspects of the Policies can be relatively easily tested
   independently, e.g., by requesting zone transfers without TSIG, from
   unauthorized IP addresses or over cleartext DNS.  Other aspects such
   as if a secondary will accept data without a TSIG digest or if
   secondaries are using Strict as opposed to Opportunistic TLS are more
   challenging.

   The mechanics of co-ordinating or enforcing such policies are out of
   the scope of this document but may be the subject of future
   operational guidance.








Zhang, et al.            Expires January 2, 2021               [Page 20]

Internet-Draft                XFR-over-TLS                     July 2020


9.  Implementation Considerations

   TBD

10.  Implementation Status

   The 1.9.2 version of Unbound [8] includes an option to perform AXoT
   (instead of TCP).  This requires the client (secondary) to
   authenticate the server (primary) using a configured authentication
   domain name.

   It is noted that use of a TLS proxy in front of the primary server is
   a simple deployment solution that can enable server side XoT.

11.  IANA Considerations

   TBD

12.  Security Considerations

   This document specifies a security measure against a DNS risk: the
   risk that an attacker collects entire DNS zones through eavesdropping
   on clear text DNS zone transfers.

   This does not mitigate:

   o  the risk that some level of zone activity might be inferred by
      observing zone transfer sizes and timing on encrypted connections
      (even with padding applied), in combination with obtaining SOA
      records by directly querying authoritative servers.

   o  the risk that hidden primaries might be inferred or identified via
      observation of encrypted connections.

   o  the risk of zone contents being obtained via zone enumeration
      techniques.

   Security concerns of DoT are outlined in [RFC7858] and [RFC8310].

13.  Acknowledgements

   The authors thank Benno Overeinder, Shumon Huque and Tim Wicinski for
   review and discussions.








Zhang, et al.            Expires January 2, 2021               [Page 21]

Internet-Draft                XFR-over-TLS                     July 2020


14.  Changelog

   draft-ietf-dprive-xfr-over-tls-01

   o  Significantly update descriptions for both AXoT and IXoT for
      message and connection handling taking into account previous
      specifications in more detail

   o  Add new discussions of padding for both AXoT and IXoT

   o  Add text on SIG(0)

   o  Update security considerations

   o  Move multi-primary considerations to earlier as they are related
      to connection handling

   draft-ietf-dprive-xfr-over-tls-01

   o  Minor editorial updates

   o  Add requirement for TLS 1.3. or later

   draft-ietf-dprive-xfr-over-tls-00

   o  Rename after adoption and reference update.

   o  Add placeholder for SIG(0) discussion

   o  Update section on ZONEMD

   draft-hzpa-dprive-xfr-over-tls-02

   o  Substantial re-work of the document.

   draft-hzpa-dprive-xfr-over-tls-01

   o  Editorial changes, updates to references.

   draft-hzpa-dprive-xfr-over-tls-00

   o  Initial commit

15.  References







Zhang, et al.            Expires January 2, 2021               [Page 22]

Internet-Draft                XFR-over-TLS                     July 2020


15.1.  Normative References

   [I-D.ietf-dprive-rfc7626-bis]
              Bortzmeyer, S. and S. Dickinson, "DNS Privacy
              Considerations", draft-ietf-dprive-rfc7626-bis-05 (work in
              progress), May 2020.

   [I-D.vcelak-nsec5]
              Vcelak, J., Goldberg, S., Papadopoulos, D., Huque, S., and
              D. Lawrence, "NSEC5, DNSSEC Authenticated Denial of
              Existence", draft-vcelak-nsec5-08 (work in progress),
              December 2018.

   [RFC1995]  Ohta, M., "Incremental Zone Transfer in DNS", RFC 1995,
              DOI 10.17487/RFC1995, August 1996, <https://www.rfc-
              editor.org/info/rfc1995>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

   [RFC2845]  Vixie, P., Gudmundsson, O., Eastlake 3rd, D., and B.
              Wellington, "Secret Key Transaction Authentication for DNS
              (TSIG)", RFC 2845, DOI 10.17487/RFC2845, May 2000,
              <https://www.rfc-editor.org/info/rfc2845>.

   [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,
              "Transport Layer Security (TLS) Session Resumption without
              Server-Side State", RFC 5077, DOI 10.17487/RFC5077,
              January 2008, <https://www.rfc-editor.org/info/rfc5077>.

   [RFC5155]  Laurie, B., Sisson, G., Arends, R., and D. Blacka, "DNS
              Security (DNSSEC) Hashed Authenticated Denial of
              Existence", RFC 5155, DOI 10.17487/RFC5155, March 2008,
              <https://www.rfc-editor.org/info/rfc5155>.

   [RFC5936]  Lewis, E. and A. Hoenes, Ed., "DNS Zone Transfer Protocol
              (AXFR)", RFC 5936, DOI 10.17487/RFC5936, June 2010,
              <https://www.rfc-editor.org/info/rfc5936>.

   [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,
              Morris, J., Hansen, M., and R. Smith, "Privacy
              Considerations for Internet Protocols", RFC 6973,
              DOI 10.17487/RFC6973, July 2013, <https://www.rfc-
              editor.org/info/rfc6973>.





Zhang, et al.            Expires January 2, 2021               [Page 23]

Internet-Draft                XFR-over-TLS                     July 2020


   [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,
              and P. Hoffman, "Specification for DNS over Transport
              Layer Security (TLS)", RFC 7858, DOI 10.17487/RFC7858, May
              2016, <https://www.rfc-editor.org/info/rfc7858>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8310]  Dickinson, S., Gillmor, D., and T. Reddy, "Usage Profiles
              for DNS over TLS and DNS over DTLS", RFC 8310,
              DOI 10.17487/RFC8310, March 2018, <https://www.rfc-
              editor.org/info/rfc8310>.

   [RFC8484]  Hoffman, P. and P. McManus, "DNS Queries over HTTPS
              (DoH)", RFC 8484, DOI 10.17487/RFC8484, October 2018,
              <https://www.rfc-editor.org/info/rfc8484>.

   [RFC8499]  Hoffman, P., Sullivan, A., and K. Fujiwara, "DNS
              Terminology", BCP 219, RFC 8499, DOI 10.17487/RFC8499,
              January 2019, <https://www.rfc-editor.org/info/rfc8499>.

15.2.  Informative References

   [I-D.ietf-dnsop-dns-zone-digest]
              Wessels, D., Barber, P., Weinberg, M., Kumari, W., and W.
              Hardaker, "Message Digest for DNS Zones", draft-ietf-
              dnsop-dns-zone-digest-08 (work in progress), June 2020.

   [RFC1034]  Mockapetris, P., "Domain names - concepts and facilities",
              STD 13, RFC 1034, DOI 10.17487/RFC1034, November 1987,
              <https://www.rfc-editor.org/info/rfc1034>.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <https://www.rfc-editor.org/info/rfc1035>.

   [RFC1982]  Elz, R. and R. Bush, "Serial Number Arithmetic", RFC 1982,
              DOI 10.17487/RFC1982, August 1996, <https://www.rfc-
              editor.org/info/rfc1982>.

   [RFC1996]  Vixie, P., "A Mechanism for Prompt Notification of Zone
              Changes (DNS NOTIFY)", RFC 1996, DOI 10.17487/RFC1996,
              August 1996, <https://www.rfc-editor.org/info/rfc1996>.

   [RFC2535]  Eastlake 3rd, D., "Domain Name System Security
              Extensions", RFC 2535, DOI 10.17487/RFC2535, March 1999,
              <https://www.rfc-editor.org/info/rfc2535>.



Zhang, et al.            Expires January 2, 2021               [Page 24]

Internet-Draft                XFR-over-TLS                     July 2020


   [RFC6891]  Damas, J., Graff, M., and P. Vixie, "Extension Mechanisms
              for DNS (EDNS(0))", STD 75, RFC 6891,
              DOI 10.17487/RFC6891, April 2013, <https://www.rfc-
              editor.org/info/rfc6891>.

   [RFC7766]  Dickinson, J., Dickinson, S., Bellis, R., Mankin, A., and
              D. Wessels, "DNS Transport over TCP - Implementation
              Requirements", RFC 7766, DOI 10.17487/RFC7766, March 2016,
              <https://www.rfc-editor.org/info/rfc7766>.

   [RFC8467]  Mayrhofer, A., "Padding Policies for Extension Mechanisms
              for DNS (EDNS(0))", RFC 8467, DOI 10.17487/RFC8467,
              October 2018, <https://www.rfc-editor.org/info/rfc8467>.

15.3.  URIs

   [1] https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/
       blob/02_updates/02-draft-svg/AXFR_mechanism.svg

   [2] https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/
       blob/02_updates/02-draft-svg/IXFR%20mechanism.svg

   [3] https://www.isc.org/bind/

   [4] https://www.nlnetlabs.nl/projects/nsd/about/

   [5] https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/
       blob/02_updates/02-draft-svg/AXoT_mechanism_1.svg

   [6] https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/
       blob/02_updates/02-draft-svg/IXoT_mechanism_1.svg

   [7] https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/
       blob/02_updates/02-draft-svg/
       Properties_of_Authentication_methods_for_XoT.svg

   [8] https://github.com/NLnetLabs/unbound/blob/release-1.9.2/doc/
       Changelog

Authors' Addresses

   Han Zhang
   Salesforce
   San Francisco, CA
   United States

   Email: hzhang@salesforce.com




Zhang, et al.            Expires January 2, 2021               [Page 25]

Internet-Draft                XFR-over-TLS                     July 2020


   Pallavi Aras
   Salesforce
   Herndon, VA
   United States

   Email: paras@salesforce.com


   Willem Toorop
   NLnet Labs
   Science Park 400
   Amsterdam  1098 XH
   The Netherlands

   Email: willem@nlnetlabs.nl


   Sara Dickinson
   Sinodun IT
   Magdalen Centre
   Oxford Science Park
   Oxford  OX4 4GA
   United Kingdom

   Email: sara@sinodun.com


   Allison Mankin
   Salesforce
   Herndon, VA
   United States

   Email: allison.mankin@gmail.com


















Zhang, et al.            Expires January 2, 2021               [Page 26]
