<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="std" docName="draft-ietf-dprive-xfr-over-tls-02" updates="1995">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=""?>
<?rfc topblock="yes"?>
<?rfc comments="no"?>
<front>
<title abbrev="XFR-over-TLS">DNS Zone Transfer-over-TLS</title>

<author initials="S." surname="Sahib" fullname="Shivan Sahib">
<organization>Salesforce</organization>
<address>
<postal>
<street></street>
<city>Vancouver, BC</city>
<code></code>
<country>Canada</country>
<region></region>
</postal>
<phone></phone>
<email>ssahib@salesforce.com</email>
<uri></uri>
</address>
</author>
<author initials="P." surname="Aras" fullname="Pallavi Aras">
<organization>Salesforce</organization>
<address>
<postal>
<street></street>
<city>Herndon, VA</city>
<code></code>
<country>United States</country>
<region></region>
</postal>
<phone></phone>
<email>paras@salesforce.com</email>
<uri></uri>
</address>
</author>
<author initials="W." surname="Toorop" fullname="Willem Toorop">
<organization>NLnet Labs</organization>
<address>
<postal>
<street></street>
<street>Science Park 400</street>
<city>Amsterdam</city>
<code>1098 XH</code>
<country>The Netherlands</country>
<region></region>
</postal>
<phone></phone>
<email>willem@nlnetlabs.nl</email>
<uri></uri>
</address>
</author>
<author initials="S." surname="Dickinson" fullname="Sara Dickinson">
<organization>Sinodun IT</organization>
<address>
<postal>
<street></street>
<street>Magdalen Centre</street>
<street>Oxford Science Park</street>
<city>Oxford</city>
<code>OX4 4GA</code>
<country>United Kingdom</country>
<region></region>
</postal>
<phone></phone>
<email>sara@sinodun.com</email>
<uri></uri>
</address>
</author>
<author initials="A." surname="Mankin" fullname="Allison Mankin">
<organization>Salesforce</organization>
<address>
<postal>
<street></street>
<city>Herndon, VA</city>
<code></code>
<country>United States</country>
<region></region>
</postal>
<phone></phone>
<email>allison.mankin@gmail.com</email>
<uri></uri>
</address>
</author>
<date year="2020" month="July" day="1"/>

<area>Internet</area>
<workgroup>dprive</workgroup>
<keyword>DNS</keyword>
<keyword>operations</keyword>
<keyword>privacy</keyword>


<abstract>
<t>DNS zone transfers are transmitted in clear text, which gives attackers the
opportunity to collect the content of a zone by eavesdropping on network
connections. The DNS Transaction Signature (TSIG) mechanism is specified to
restrict direct zone transfer to authorized clients only, but it does not add
confidentiality. This document specifies use of DNS-over-TLS to prevent zone
contents collection via passive monitoring of zone transfers.
</t>
</abstract>


</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>DNS has a number of privacy vulnerabilities, as discussed in detail in
<xref target="I-D.ietf-dprive-rfc7626-bis"/>. Stub client to recursive resolver query
privacy has received the most attention to date. There are now standards track
documents for three encryption capabilities for stub to recursive queries and
more work going on to guide deployment of specifically DNS-over-TLS (DoT)
<xref target="RFC7858"/> and DNS-over-HTTPS (DoH) <xref target="RFC8484"/>.
</t>
<t><xref target="I-D.ietf-dprive-rfc7626-bis"/> established that stub client DNS query
transactions are not public and needed protection, but on zone transfer
<xref target="RFC1995"/> <xref target="RFC5936"/> it says only:
</t>
<t>&quot;Privacy risks for the holder of a zone (the risk that someone gets the data)
are discussed in [RFC5936] and [RFC5155].&quot;
</t>
<t>In what way is exposing the full contents of a zone a privacy risk? The contents
of the zone could include information such as names of persons used in names of
hosts. Best practice is not to use personal information for domain names, but
many such domain names exist. There may also be regulatory, policy or other
reasons why the zone contents in full must be treated as private.
</t>
<t>Neither of the RFCs mentioned in <xref target="I-D.ietf-dprive-rfc7626-bis"/>
contemplates the risk that someone gets the data through eavesdropping on
network connections, only via enumeration or unauthorized transfer as described
in the following paragraphs.
</t>
<t><xref target="RFC5155"/> specifies NSEC3 to prevent zone enumeration, which is when queries
for the authenticated denial of existences records of DNSSEC allow a client to
walk through the entire zone. Note that the need for this protection also
motivates NSEC5 <xref target="I-D.vcelak-nsec5"/>; zone walking is now possible with NSEC3
due to crypto-breaking advances, and NSEC5 is a response to this problem.
</t>
<t><xref target="RFC5155"/> does not address data obtained outside zone enumeration (nor does
<xref target="I-D.vcelak-nsec5"/>). Preventing eavesdropping of zone transfers (this draft)
is orthogonal to preventing zone enumeration, though they aim to protect the
same information.
</t>
<t><xref target="RFC5936"/> specifies using TSIG <xref target="RFC2845"/> for authorization of the clients
of a zone transfer and for data integrity, but does not express any need for
confidentiality, and TSIG does not offer encryption. Some operators use SSH
tunneling or IPSec to encrypt the transfer data.
</t>
<t>Because the AXFR zone transfer is typically carried out over TCP from
authoritative DNS protocol implementations, encrypting AXFR using DoT
<xref target="RFC7858"/> seems like a simple step forward. This document specifies how to use
DoT to prevent zone collection from zone transfers, including discussion of
approaches for IXFR, which uses UDP or TCP.
</t>
</section>

<section anchor="terminology" title="Terminology">
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> and
<xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.
</t>
<t>Privacy terminology is as described in Section 3 of <xref target="RFC6973"/>.
</t>
<t>Note that in this document we choose to use the terms 'primary' and 'secondary'
for two servers engaged in zone transfers.
</t>
<t>DNS terminology is as described in <xref target="RFC8499"/>.
</t>
<t>DoT: DNS-over-TLS as specified in <xref target="RFC7858"/>
</t>
<t>XoT: Generic XFR-over-TLS mechanisms as specified in this document
</t>
<t>AXoT: AXFR-over-TLS
</t>
<t>IXoT: IXFR over-TLS
</t>
</section>

<section anchor="use-cases-for-xfrovertls" title="Use Cases for XFR-over-TLS">
<t>
<list style="symbols">
<t>Confidentiality. Clearly using an encrypted transport for zone transfers will
defeat zone content leakage that can occur via passive surveillance.</t>
<t>Authentication. Use of single or mutual TLS authentication (in combination
with ACLs) can complement and potentially be an alternative to TSIG.</t>
<t>Performance. Existing AXFR and IXFR mechanisms have the burden of backwards
compatibility with older implementations based on the original specifications
in <xref target="RFC1034"/> and <xref target="RFC1035"/>. For example, some older AXFR servers donâ€™t
support using a TCP connection for multiple AXFR sessions or XFRs of different
zones because they have not been updated to follow the guidance in <xref target="RFC5936"/>.
Any implementation of XFR-over-TLS (XoT) would obviously be required to
implement optimized and interoperable transfers as described in <xref target="RFC5936"/>,
e.g., transfer of multiple zones over one connection.</t>
<t>Performance. Current usage of TCP for IXFR is sub-optimal in some cases i.e.
connections are frequently closed after a single IXFR.</t>
</list>
</t>
</section>

<section anchor="connection-and-data-flows-in-existing-xfr-mechanisms" title="Connection and Data Flows in Existing XFR Mechanisms">
<t>The original specification for zone transfers in <xref target="RFC1034"/> and <xref target="RFC1035"/> was
based on a polling mechanism: a secondary performed a periodic SOA query (based
on the refresh timer) to determine if an AXFR was required.
</t>
<t><xref target="RFC1995"/> and <xref target="RFC1996"/> introduced the concepts of IXFR and NOTIFY
respectively, to provide for prompt propagation of zone updates. This has
largely replaced AXFR where possible, particularly for dynamically updated
zones.
</t>
<t><xref target="RFC5936"/> subsequently redefined the specification of AXFR to improve
performance and interoperability.
</t>
<t>In this document we use the phrase &quot;XFR mechanism&quot; to describe the entire set of
message exchanges between a secondary and a primary that concludes in a
successful AXFR or IXFR request/response. This set may or may not include
</t>
<t>
<list style="symbols">
<t>NOTIFY messages</t>
<t>SOA queries</t>
<t>Fallback from IXFR to AXFR</t>
<t>Fallback from IXFR-over-UDP to IXFR-over-TCP</t>
</list>
</t>
<t>The term is used to encompasses the range of permutations that are possible and
is useful to distinguish the 'XFR mechanism' from a single XFR
request/response exchange.
</t>

<section anchor="axfr-mechanism" title="AXFR Mechanism">
<t>The figure below provides an outline of an AXFR mechanism including NOTIFYs.
</t>
<t><eref target="https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/blob/02_updates/02-draft-svg/AXFR_mechanism.svg">Figure 1. AXFR Mechanism</eref>
</t>
<t>
<list style="numbers">
<t>An AXFR is often (but not always) preceded by a NOTIFY (over UDP) from the
primary to the secondary. A secondary may also initiate an AXFR based on a
refresh timer or scheduled/triggered zone maintenance.</t>
<t>The secondary will normally (but not always) make a SOA query to the primary
to obtain the serial number of the zone held by the primary.</t>
<t>If the primary serial is higher than the secondaries serial (using Serial
Number Arithmetic <xref target="RFC1982"/>), the secondary makes an AXFR request (over TCP)
to the primary after which the AXFR data flows in one or more AXFR responses on
the TCP connection.</t>
</list>
</t>
<t><xref target="RFC5936"/> specifies that AXFR must use TCP as the transport protocol but
details that there is no restriction in the protocol that a single TCP connection
must be used only for a single AXFR exchange, or even solely for XFRs. For
example, it outlines that the SOA query can also happen on this connection.
However, this can cause interoperability problems with older implementations
that support only the trivial case of one AXFR per connection.
</t>
<t>Further details of the limitations in existing AXFR implementations are outlined
in <xref target="RFC5936"/>.
</t>
<t>It is noted that unless the NOTIFY is sent over a trusted communication channel
and/or signed by TSIG is can be spoofed causing unnecessary zone transfer
attempts.
</t>
<t>Similarly unless the SOA query is sent over a trusted communication channel
and/or signed by TSIG the response can, in principle, be spoofed causing a
secondary to incorrectly believe its version of the zone is update to date.
Repeated successful attacks on the SOA could result in a secondary serving stale
zone data.
</t>
</section>

<section anchor="ixfr-mechanism" title="IXFR Mechanism">
<t>The figure below provides an outline of the IXFR mechanism including NOTIFYs.
</t>
<t><eref target="https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/blob/02_updates/02-draft-svg/IXFR%20mechanism.svg">Figure 1. IXFR Mechanism</eref>
</t>
<t>
<list style="numbers">
<t>An IXFR is normally (but not always) preceded by a NOTIFY (over UDP) from the
primary to the secondary. A secondary may also initiate an IXFR based on a
refresh timer or scheduled/triggered zone maintenance.</t>
<t>The secondary will normally (but not always) make a SOA query to the primary
to obtain the serial number of the zone held by the primary.</t>
<t>If the primary serial is higher than the secondaries serial (using Serial
Number Arithmetic <xref target="RFC1982"/>), the secondary makes an IXFR request to the
primary after the primary sends an IXFR response.</t>
</list>
</t>
<t><xref target="RFC1995"/> specifies that Incremental Transfer may use UDP if the entire IXFR
response can be contained in a single DNS packet, otherwise, TCP is used. In
fact is says in non-normative language:
</t>
<t>&quot;Thus, a client should first make an IXFR query using UDP.&quot;
</t>
<t>So there may be a forth step above where the client falls back to IXFR-over-TCP.
There may also be a forth step where the secondary must fall back to AXFR
because, e.g., the primary does not support IXFR.
</t>
<t>However it is noted that at least two widely used open source authoritative
nameserver implementations (<eref target="https://www.isc.org/bind/">BIND</eref> and
<eref target="https://www.nlnetlabs.nl/projects/nsd/about/">NSD</eref>) do IXFR using TCP by
default in their latest releases. For BIND TCP connections are sometimes used
for SOA queries but in general they are not used persistently and close after
an IXFR is completed.
</t>
<t>QUESTION FOR US: Look at packet captures from NSD and Knot Auth to see what they do.
</t>
<t>It is noted that the specification for IXFR was published well before TCP was
considered a first class transport for DNS. This document therefore updates
<xref target="RFC1995"/> to state that DNS implementations that support IXFR-over-TCP MUST use
<xref target="RFC7766"/> to optimize the use of TCP connections and SHOULD use <xref target="RFC7858"/> to
manage persistent connections.
</t>
<t>QUESTION FOR US: We don't go as far here as updating IXFR-over-TCP to match the
behavior outlined in section 5.4.2 for IXoT. Should we?
</t>
</section>

<section anchor="data-leakage-of-notify-and-soa-message-exchanges" title="Data Leakage of NOTIFY and SOA Message Exchanges">
<t>This section attempts to presents a rationale for also encrypting the other
messages in the XFR mechanism.
</t>
<t>Since the SOA of the published zone can be trivially discovered by simply
querying the publicly available authoritative servers leakage of this RR is not
discussed in the following sections.
</t>

<section anchor="notify" title="NOTIFY">
<t>Unencrypted NOTIFY messages identify configured secondaries on the primary.
</t>
<t><xref target="RFC1996"/> also states:
</t>
<t>&quot;If ANCOUNT&gt;0, then the answer section represents an
  unsecure hint at the new RRset for this (QNAME,QCLASS,QTYPE).
</t>
<t>But since the only supported QTYPE for NOTIFY is SOA, this does not pose a
potential leak.
</t>
</section>

<section anchor="soa" title="SOA">
<t>For hidden primaries or secondaries the SOA response leaks the degree of lag of
any downstream secondary.
</t>
</section>
</section>
</section>

<section anchor="connection-and-data-flows-in-xot" title="Connection and Data Flows in XoT">

<section anchor="performance-considerations" title="Performance Considerations">
<t>The details in <xref target="RFC7766"/>, <xref target="RFC7858"/> and <xref target="RFC8310"/> about, e.g., using
persistent connections and TLS Session Resumption <xref target="RFC5077"/> are fully
applicable to XoT as well.
</t>
<t>It is RECOMMENDED that clients and servers that support XoT also implement
EDNS0 Keepalive [RFC7828].
</t>
<t>It is useful to note that in these mechanisms it is the secondary that initiates
the TLS connection to the primary for a XFR request, so that in terms of
connectivity the secondary is the TLS client and the primary the TLS server.
</t>
</section>

<section anchor="tls-versions" title="TLS versions">
<t>For improved security all implementations of this specification MUST use only TLS 1.3 [RFC8446] or later.
</t>
</section>

<section anchor="axot-mechanism" title="AXoT mechanism">
<t>The figure below provides an outline of the AXoT mechanism including NOTIFYs.
</t>
<t><eref target="https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/blob/02_updates/02-draft-svg/AXoT_mechanism_1.svg">Figure 3: AXoT mechanism</eref>
</t>
<t>The connection for AXFR-over-TLS (AXoT) SHOULD be established using port 853, as
specified in <xref target="RFC7858"/>, unless there is mutual agreement between the secondary
and primary to use a port other than port 853 for AXoT.
</t>

<section anchor="coverage-and-relationship-to-rfc5936" title="Coverage and relationship to RFC5936">
<t><xref target="RFC5936"/> re-specified AXFR providing additional guidance beyond that provided
in <xref target="RFC1034"/> and <xref target="RFC1035"/>. For example, sections 4.1, 4.1.1 and 4.1.2 of
<xref target="RFC5936"/> provide improved guidance for AXFR clients and servers with regard to
re-use of connections for multiple AXFRs, AXFRs of different zones and using TCP
connection for other queries including SOA. However <xref target="RFC5936"/> was constrained
by having to be backwards compatible with some very early basic implementations
of AXFR.
</t>
<t>Here we specify some optimized behaviors for AXoT, based
closely on those in <xref target="RFC5936"/>, but without the constraint of backwards
compatibility since it is expected that all implementations of AXoT fully
implement the behavior described here.
</t>
<t>Where any behavior is not explicitly described here, the behavior specified in
<xref target="RFC5936"/> MUST be followed. Any behavior specified here takes precedence for
AXoT implementations over that in <xref target="RFC5936"/>.
</t>
</section>

<section anchor="axot-connection-and-message-handling" title="AXoT connection and message handling">
<t>The first paragraph of Section 4.1.1 of <xref target="RFC5936"/> says that clients SHOULD
close the connection when there is no 'apparent need' to use the connection for
some time period.
</t>
<t>For AXoT this requirement is updated: AXoT clients and servers SHOULD use EDNS0
Keepalive [RFC7828] to establish the connection timeouts to be used. The client
SHOULD send the EDNS0 Keepalive option on every AXoT request sent so that the
server has every opportunity to update the Keepalive timeout. The AXoT server
may use the frequency of recent AXFRs to calculate an average update rate as
input to the decision of what EDNS0 Keepalive timeout to use. If the server
does not support EDNS0 Keepalive the client MAY keep the connection open for a
few seconds (<xref target="RFC7766"/> recommends that servers use timeouts of at least a few
seconds).
</t>
<t>Whilst the specification for EDNS0  <xref target="RFC6891"/>  does not specifically mention AXFRs, it does say
</t>
<t>&quot;If an OPT record is present in a received request, compliant
   responders MUST include an OPT record in their respective responses.&quot;
</t>
<t>We clarify here that if an OPT record is present in a received AXoT request,
compliant responders MUST include an OPT record in each of the subsequent AXoT
responses. Note that this requirement, combined with the use of EDNS0
Keepalive, enables AXoT servers to signal the desire to close a connection due
to low resources by sending an EDNS0 Keepalive option with a timeout of 0 on
any AXoT response (in the absence of another way to signal the abort of a AXoT
transfer).
</t>
<t>An AXoT server MUST be able to handle multiple AXFR requests on a
single TLS connection (for the same and different zones), as well as to handle
other query/response transactions over it.
</t>
<t><xref target="RFC5936"/> says:
</t>

<figure align="center"><artwork align="center">
"An AXFR client MAY use an already opened TCP connection to start an
AXFR session.  Using an existing open connection is RECOMMENDED over
opening a new connection.  (Non-AXFR session traffic can also use an
open connection.)"
</artwork></figure>
<t>For AXoT this requirement is restated: AXoT clients SHOULD re-use an existing
open TLS connection when starting any new AXoT session to the same primary, and
for issuing SOA queries, instead of opening a new connection. (Non-AXoT session
traffic can also use an open TLS connection.) The number of TLS connections
between a secondary and primary SHOULD be minimized.
</t>
<t>Valid reasons for not re-using existing connections might include:
</t>
<t>
<list style="symbols">
<t>reaching a configured limit for the number of outstanding queries allowed on a
single TLS connection</t>
<t>the message ID pool has already been exhausted on an open connection</t>
<t>a large number of timeouts or slow responses have occurred on an open
connection</t>
<t>an EDNS0 Keepalive option with a timeout of 0 has been received from the
server and the client is in the process of closing the connection</t>
</list>
</t>
<t>If no TLS connections are currently open, AXoT clients MAY send SOA queries over
UDP, TCP or TLS.
</t>
<t><xref target="RFC5936"/> says:
</t>

<figure align="center"><artwork align="center">
"Some old AXFR clients expect each response message to contain only a
single RR.  To interoperate with such clients, the server MAY
restrict response messages to a single RR."
</artwork></figure>
<t>This is opposed to the normal behavior of containing a sufficient number of
RRs to reasonably amortize the per-message overhead. We clarify here that AXoT
clients MUST be able to handle responses that include multiple RRs, up to the
largest number that will fit within a DNS message (taking the required content
of the other sections into account, as described here and in <xref target="RFC5936"/>). This
removes any burden on AXoT servers of having to accommodate a configuration
option or support for restricting responses to containing only a single RR.
</t>
<t>An AXoT client SHOULD pipeline AXFR requests for different zones on a single TLS
connection. An AXoT server SHOULD respond to those requests as soon as the
response is available i.e. potentially out of order.
</t>
</section>

<section anchor="padding-axot-responses" title="Padding AXoT responses">
<t>The goal of padding AXoT responses would be two fold:
</t>
<t>
<list style="symbols">
<t>to obfuscate the actual size of the transferred zone to minimize information
leakage about the entire contents of the zone.</t>
<t>to obfuscate the incremental changes to the zone between SOA updates to
minimize information leakage about zone update activity and growth.</t>
</list>
</t>
<t>Note that the re-use of TLS connections for transfers of multiple different
zones complicates any attempt to analyze the traffic size and timing to
extract information.
</t>
<t>We note here that any requirement to obfuscate the total zone size is likely to
require a server to create 'empty' AXoT responses. That is, AXoT responses that
contain no RR's apart from an OPT RR containing the EDNS(0) option for padding.
However, as with existing AXFR, the last AXoT response message sent MUST
contain the same SOA that was in the first message of the AXoT response series
in order to signal the conclusion of the zone transfer.
</t>
<t><xref target="RFC5936"/> says:
</t>

<figure align="center"><artwork align="center">
"Each AXFR response message SHOULD contain a sufficient number of RRs
to reasonably amortize the per-message overhead, up to the largest
number that will fit within a DNS message (taking the required
content of the other sections into account, as described below)."
</artwork></figure>
<t>'Empty' AXoT responses generated in order to meet a padding requirement will be
 exceptions to the above statement. In order to guarantee support for future
padding policies, we state here that secondary implementations MUST be
resilient to receiving padded AXoT responses, including 'empty' AXoT responses
that contain only an OPT RR containing the EDNS(0) option for padding.
</t>
<t>Recommendation of specific policies for padding AXoT responses are out of scope
for this specification. Detailed considerations of such policies and the
trade-offs involved are expected to be the subject of future work.
</t>
</section>
</section>

<section anchor="ixot-mechanism" title="IXoT mechanism">
<t>The figure below provides an outline of the IXoT mechanism including NOTIFYs.
</t>
<t><eref target="https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/blob/02_updates/02-draft-svg/IXoT_mechanism_1.svg">Figure 4: IXoT mechanism</eref>
</t>
<t>The connection for IXFR-over-TLS (IXoT) SHOULD be established using port 853, as
specified in <xref target="RFC7858"/>, unless there is mutual agreement between the secondary
and primary to use a port other than port 853 for IXoT.
</t>

<section anchor="coverage-and-relationship-to-rfc1995" title="Coverage and relationship to RFC1995">
<t><xref target="RFC1995"/> says nothing with respect to optimizing IXFRs over TCP or re-using
already open TCP connections to perform IXFRs or other queries. We provide new
guidance here specific to IXoT that aligns with the guidance in <xref target="RFC5936"/> for
AXFR, that in section <xref target="axot-mechanism"/> for AXoT, and with that for performant
TCP/TLS usage in <xref target="RFC7766"/> and <xref target="RFC7858"/>.
</t>
<t>Where any behavior is not explicitly described here, the behavior specified in
<xref target="RFC1995"/> MUST be followed. Any behavior specified here takes precedence for
IXoT implementations over that in <xref target="RFC1995"/>.
</t>
</section>

<section anchor="ixot-connection-and-message-handling" title="IXoT connection and message handling">
<t>In a manner entirely analogous to that described in paragraph 2 of
<xref target="axot-connection-and-message-handling"/> IXoT clients and servers SHOULD use
EDNS0 Keepalive [RFC7828] to establish the connection timeouts to be used.
</t>
<t>In the original definition of IXFR, there arguably is an implicit assumption
(probably unintentional) that a TCP connection is used for one and only one IXFR
request. Indeed, several open source implementations currently take this
approach. An IXoT server MUST be able to handle multiple IXFR requests on a
single TLS connection (for the same and different zones), as well as to handle
other query/response transactions over it.
</t>
<t>IXoT clients SHOULD re-use an existing open TLS connection when making any new
IXoT request to the same primary, and for issuing SOA queries, instead of
opening a new connection. (Non-IXoT traffic can also use an open TLS
connection.) The number of TLS connections between a secondary and primary
SHOULD be minimized.
</t>
<t>Valid reasons for not re-using existing connections are the same as those
described in <xref target="axot-connection-and-message-handling"/>
</t>
<t>If no TLS connections are currently open, IXoT clients MAY send SOA queries over
UDP, TCP or TLS.
</t>
<t>An IXoT client SHOULD pipeline IXFR requests for different zones on a single TLS
connection. An IXoT server SHOULD respond to those requests as soon as the
response is available i.e. potentially out of order.
</t>
</section>

<section anchor="condensation-of-responses" title="Condensation of responses">
<t>QUESTION: Since this is a new specification should there be a requirement that
IXoT servers are RECOMMENDED to condense responses as described in Section 6 of
[RFC1995]. [RFC1995] document says this is optional and MAY be done. Whilst it
does add complexity to generating response it can significantly reduce the size
of responses and will have implications for padding.
</t>
</section>

<section anchor="padding-of-ixot-responses" title="Padding of IXoT responses">
<t>The goal of padding IXoT responses would be to obfuscate the incremental
changes to the zone between SOA updates to minimize information leakage about
zone update activity and growth. Both the size and timing of the IXoT responses could
reveal information.
</t>
<t>IXFR responses can vary in size greatly from the order of 100 bytes for one or
two record updates, to tens of thousands of bytes for large dynamic DNSSEC
signed zones. The frequency of IXFR responses can also depend greatly on if and
how the zone is DNSSEC signed.
</t>
<t>In order to guarantee support for future padding policies, we state here that
secondary implementations MUST be resilient to receiving padded IXoT responses.
</t>
<t>Recommendation of specific policies for padding IXoT responses are out of scope
for this specification. Detailed considerations of such policies and the
trade-offs involved are expected to be the subject of future work.
</t>
</section>

<section anchor="fallback-to-axfr" title="Fallback to AXFR">
<t>Fallback to AXFR can happen, for example, if the server is not able to provide
an IXFR for the requested SOA. Implementations differ in how long they store
zone deltas and how many may be stored at any one time.
</t>
<t>After a failed IXFR a IXoT client SHOULD request the AXFR on the already open
TLS connection.
</t>
</section>
</section>
</section>

<section anchor="multiprimary-configurations" title="Multi-primary Configurations">
<t>Also known as multi-master configurations this model can provide flexibility
and redundancy particularly for IXFR. A secondary will receive one or more
NOTIFY messages and can send an SOA to all of the configured primaries. It can
then choose to send an XFR request to the primary with the highest SOA (or
other criteria, e.g., RTT).
</t>
<t>When using persistent connections the secondary may have a TLS connection
already open to one or more primaries. Should a secondary preferentially
request an XFR from a primary to which it already has an open TLS connection
or the one with the highest SOA (assuming it doesn't have a connection open to
it already)?
</t>
<t>Two extremes can be envisaged here. The first one can be considered a 'preferred
primary connection' model. In this case the secondary continues to use one
persistent connection to a single primary until it has reason not to. Reasons
not to might include the primary repeatedly closing the connection, long RTTs on
transfers or the SOA of the primary being an unacceptable lag behind the SOA of
an alternative primary.
</t>
<t>The other extreme can be considered a 'parallel primary connection' model. Here
a secondary could keep multiple persistent connections open to all available
primaries and only request XFRs from the primary with the highest serial number.
Since normally the number of secondaries and primaries in direct contact in a
transfer group is reasonably low this might be feasible if latency is the most
significant concern.
</t>
<t>Recommendation of a particular scheme is out of scope of this document but
implementations are encouraged to provide configuration options that allow
operators to make choices about this behavior.
</t>
</section>

<section anchor="zone-transfer-with-dot--authentication" title="Zone Transfer with DoT - Authentication">

<section anchor="tsig" title="TSIG">
<t>TSIG <xref target="RFC2845"/> provides a mechanism for two or more parties to use shared
secret keys which can then be used to create a message digest to protect
individual DNS messages. This allows each party to authenticate that a request
or response (and the data in it) came from the other party, even if it was
transmitted over an unsecured channel or via a proxy. It provides party-to-party
data authentication, but not hop-to-hop channel authentication or
confidentiality.
</t>
</section>

<section anchor="sig0" title="SIG(0)">
<t>SIG(0) <xref target="RFC2535"/> similarly also provides a mechanism to digitally sign a DNS
message but uses public key authentication, where the public keys are stored in
DNS as KEY RRs and a private key is stored at the signer. It also provides
party-to-party data authentication, but not hop-to-hop channel authentication or
confidentiality.
</t>
</section>

<section anchor="tls" title="TLS">

<section anchor="opportunistic" title="Opportunistic">
<t>Opportunistic TLS <xref target="RFC8310"/> provides a defense against passive
surveillance, providing on-the-wire confidentiality.
</t>
</section>

<section anchor="strict" title="Strict">
<t>Strict TLS <xref target="RFC8310"/> requires that a client is configured with an
authentication domain name (and/or SPKI pinset) that should be used to
authenticate the TLS handshake with the server. This additionally provides a
defense for the client against active surveillance, providing client-to-server
authentication and end-to-end channel confidentiality.
</t>
</section>

<section anchor="mutual" title="Mutual">
<t>This is an extension to Strict TLS <xref target="RFC8310"/> which requires that a client is
configured with an authentication domain name (and/or SPKI pinset) and a client
certificate. The client offers the certificate for authentication by the server
and the client can authentic the server the same way as in Strict TLS. This
provides a defense for both parties against active surveillance, providing
bi-directional authentication and end-to-end channel confidentiality.
</t>
</section>
</section>

<section anchor="ip-based-acl-on-the-primary" title="IP Based ACL on the Primary">
<t>Most DNS server implementations offer an option to configure an IP based Access
Control List (ACL), which is often used in combination with TSIG based ACLs to
restrict access to zone transfers on primary servers.
</t>
<t>This is also possible with XoT but it must be noted that as with TCP the
implementation of such an ACL cannot be enforced on the primary until a XFR
request is received on an established connection.
</t>
<t>If control were to be any more fine-grained than this then a separate, dedicated
port would need to be agreed between primary and secondary for XoT such that
implementations would be able to refuse connections on that port to all clients
except those configured as secondaries.
</t>
</section>

<section anchor="zonemd" title="ZONEMD">
<t>Message Digest for DNS Zones (ZONEMD) <xref target="I-D.ietf-dnsop-dns-zone-digest"/> digest
is a mechanism that can be used to verify the content of a standalone zone. It
is designed to be independent of the transmission channel or mechanism, allowing
a general consumer of a zone to do origin authentication of the entire zone
contents. Note that the current version of <xref target="I-D.ietf-dnsop-dns-zone-digest"/>
states:
</t>
<t><spanx style="verb">As specified at this time, ZONEMD is not designed for use in large, dynamic
zones due to the time and resources required for digest calculation. The ZONEMD
record described in this document includes fields reserved for future work to
support large, dynamic zones.</spanx>
</t>
<t>It is complementary the above mechanisms and can be used in conjunction with
XoT but is not considered further.
</t>
</section>

<section anchor="comparison-of-authentication-methods" title="Comparison of Authentication Methods">
<t>The Table below compares the properties of a selection of the above methods in
terms of what protection they provide to the secondary and primary servers
during XoT in terms of:
</t>
<t>
<list style="symbols">
<t>'Data Auth': Authentication that the DNS message data is signed by the party
with whom credentials were shared (the signing party may or may not be party
operating the far end of a TCP/TLS connection in a 'proxy' scenario). For the
primary the TSIG on the XFR request confirms that the requesting party is
authorized to request zone data, for the secondary it authenticates the zone
data that is received.</t>
<t>'Channel Conf': Confidentiality of the communication channel between the
client and server (i.e. the two end points of a TCP/TLS connection).</t>
<t>Channel Auth: Authentication of the identity of party to whom a TCP/TLS
connection is made (this might not be a direct connection between the primary
and secondary in a proxy scenario).</t>
</list>
</t>
<t>It is noted that zone transfer scenarios can vary from a simple single
primary/secondary relationship where both servers are under the control of a
single operator to a complex hierarchical structure which includes proxies and
multiple operators. Each deployment scenario will require specific analysis to
determine which authentication methods are best suited to the deployment model
in question.
</t>
<t><eref target="https://github.com/hanzhang0116/hzpa-dprive-xfr-over-tls/blob/02_updates/02-draft-svg/Properties_of_Authentication_methods_for_XoT.svg">Table 1: Properties of Authentication methods for XoT</eref>
</t>
<t>Based on this analysis it can be seen that:
</t>
<t>
<list style="symbols">
<t>A combination of Opportunistic TLS and TSIG provides both data authentication
and channel confidentiality for both parties. However this does not stop a
MitM attack on the channel which could be used to gather zone data.</t>
<t>Using just mutual TLS can be considered a standalone solution if the
secondary has reason to place equivalent trust in channel authentication as
data authentication, e.g., the same operator runs both the primary and
secondary.</t>
<t>Using TSIG, Strict TLS and an ACL on the primary provides all 3 properties for
both parties with probably the lowest operational overhead.</t>
</list>
</t>
</section>
</section>

<section anchor="policies-for-both-axfr-and-ixfr" title="Policies for Both AXFR and IXFR">
<t>We call the entire group of servers involved in XFR (all the primaries and all
the secondaries) the 'transfer group'.
</t>
<t>Within any transfer group both AXFRs and IXFRs for a zone SHOULD all use the
same policy, e.g., if AXFRs use AXoT all IXFRs SHOULD use IXoT.
</t>
<t>In order to assure the confidentiality of the zone information, the entire
transfer group MUST have a consistent policy of requiring confidentiality. If
any do not, this is a weak link for attackers to exploit.
</t>
<t>A XoT policy should specify
</t>
<t>
<list style="symbols">
<t>If TSIG or SIG(0) is required</t>
<t>What kind of TLS is required (Opportunistic, Strict or mTLS)</t>
<t>If IP based ACLs should also be used.</t>
</list>
</t>
<t>Since this may require configuration of a number of servers who may be under
the control of different operators the desired consistency could be hard to
enforce and audit in practice.
</t>
<t>Certain aspects of the Policies can be relatively easily tested independently,
e.g., by requesting zone transfers without TSIG, from unauthorized IP addresses
or over cleartext DNS. Other aspects such as if a secondary will accept data
without a TSIG digest or if secondaries are using Strict as opposed to
Opportunistic TLS are more challenging.
</t>
<t>The mechanics of co-ordinating or enforcing such policies are out of the scope
of this document but may be the subject of future operational guidance.
</t>
</section>

<section anchor="implementation-considerations" title="Implementation Considerations">
<t>TBD
</t>
</section>

<section anchor="implementation-status" title="Implementation Status">
<t>The 1.9.2 version of
<eref target="https://github.com/NLnetLabs/unbound/blob/release-1.9.2/doc/Changelog">Unbound</eref>
 includes an option to perform AXoT (instead of TCP). This requires
the client (secondary) to authenticate the server (primary) using a configured
authentication domain name.
</t>
<t>It is noted that use of a TLS proxy in front of the primary server is a simple
deployment solution that can enable server side XoT.
</t>
</section>

<section anchor="iana-considerations" title="IANA Considerations">
<t>TBD
</t>
</section>

<section anchor="security-considerations" title="Security Considerations">
<t>This document specifies a security measure against a DNS risk: the risk that an
attacker collects entire DNS zones through eavesdropping on clear text DNS zone
transfers.
</t>
<t>This does not mitigate:
</t>
<t>
<list style="symbols">
<t>the risk that some level of zone activity might be inferred by observing zone
transfer sizes and timing on encrypted connections (even with padding
applied), in combination with obtaining SOA records by directly querying
authoritative servers.</t>
<t>the risk that hidden primaries might be inferred or identified via
observation of encrypted connections.</t>
<t>the risk of zone contents being obtained via zone enumeration techniques.</t>
</list>
</t>
<t>Security concerns of DoT are outlined in <xref target="RFC7858"/> and <xref target="RFC8310"/>.
</t>
</section>

<section anchor="acknowledgements" title="Acknowledgements">
<t>The authors thank Benno Overeinder, Shumon Huque and Tim Wicinski for review
and discussions.
</t>
</section>

<section anchor="contributors" title="Contributors">
<t>Significant contributions to the document were made by:
</t>
<t>Han Zhang 
<vspace/>
   Salesforce
<vspace/>
   San Francisco, CA
<vspace/>
   United States
</t>
<t>Email: hzhang@salesforce.com
</t>
</section>

<section anchor="changelog" title="Changelog">
<t>draft-ietf-dprive-xfr-over-tls-01
</t>
<t>
<list style="symbols">
<t>Significantly update descriptions for both AXoT and IXoT for message and
connection handling taking into account previous specifications in more detail</t>
<t>Add new discussions of padding for both AXoT and IXoT</t>
<t>Add text on SIG(0)</t>
<t>Update security considerations</t>
<t>Move multi-primary considerations to earlier as they are related to connection
handling</t>
</list>
</t>
<t>draft-ietf-dprive-xfr-over-tls-01
</t>
<t>
<list style="symbols">
<t>Minor editorial updates</t>
<t>Add requirement for TLS 1.3. or later</t>
</list>
</t>
<t>draft-ietf-dprive-xfr-over-tls-00
</t>
<t>
<list style="symbols">
<t>Rename after adoption and reference update.</t>
<t>Add placeholder for SIG(0) discussion</t>
<t>Update section on ZONEMD</t>
</list>
</t>
<t>draft-hzpa-dprive-xfr-over-tls-02
</t>
<t>
<list style="symbols">
<t>Substantial re-work of the document.</t>
</list>
</t>
<t>draft-hzpa-dprive-xfr-over-tls-01
</t>
<t>
<list style="symbols">
<t>Editorial changes, updates to references.</t>
</list>
</t>
<t>draft-hzpa-dprive-xfr-over-tls-00
</t>
<t>
<list style="symbols">
<t>Initial commit</t>
</list>
</t>
</section>

</middle>
<back>
<references title="Normative References">
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-rfc7626-bis.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.vcelak-nsec5.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1995.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2845.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5077.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5155.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5936.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6973.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7858.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8310.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8484.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8499.xml"?>
</references>
<references title="Informative References">
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dnsop-dns-zone-digest.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1982.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1996.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2535.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7766.xml"?>
</references>

</back>
</rfc>
